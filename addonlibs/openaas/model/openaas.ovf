#ifndef openaas_OVF_INCLUDED
#define openaas_OVF_INCLUDED

/* 
	Declare your C functions here. 
	Example:
	typedef OV_DLLFNCEXPORT void MY_FUNC(
		OV_STRING varName
	);
*/
#include "openaas.ovt"
#include "open62541.h"
#include "libov/ov_macros.h"
#include "libov/ov_path.h"
#include "libov/ov_result.h"

typedef UA_StatusCode UA_FNC_OVMODELMANAGERNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVMODELMANAGERMETHODNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVOPENAASNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVOPENAASFOLDERNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVAASFOLDERNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVLIFECYCLEARCHIVENODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVLIFECYCLEENTRYNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVPROPERTYVALUESTATEMENTLISTNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVPROPERTYVALUESTATEMENTNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVVIEWSNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVHEADERNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVBODYNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);
typedef UA_StatusCode UA_FNC_OVCARRIERNODETOOPCUA(void *handle, const UA_NodeId *nodeId, UA_Node** opcuaNode);

/* nodestore interfacing functions */
typedef void UA_FNC_DELETENODE(UA_Node* node);
typedef UA_Node* UA_FNC_NEWNODE(UA_NodeClass nodeClass);
typedef UA_StatusCode UA_FNC_INSERTNODE(void* handle, UA_Node* node, UA_NodeId *parrentNode);
typedef UA_Node * UA_FNC_GETNODE(void* handle, UA_NodeId* nodeId);
typedef UA_StatusCode UA_FNC_REPLACENODE(void* handle, UA_Node* node);
typedef UA_StatusCode UA_FNC_REMOVENODE(void* handle, UA_NodeId* nodeId);
typedef void UA_FNC_OVNODESTOREINTERFACEOPENAASNEW(UA_NodestoreInterface* nsi);
typedef void UA_FNC_OVNODESTOREINTERFACEOPENAASDELETE(UA_NodestoreInterface * nsi);
typedef UA_StatusCode UA_FNC_METHODCALLBACKSTANDARD(void *methodHandle, const UA_NodeId *objectId,
                     const UA_NodeId *sessionId, void *sessionHandle,
                     size_t inputSize, const UA_Variant *input,
                     size_t outputSize, UA_Variant *output);

// modelmanager functions
typedef AASStatusCode UA_FNC_CREATEAAS(IdentificationType aasId, OV_STRING aasName, IdentificationType assetId);
typedef AASStatusCode UA_FNC_DELETEAAS(IdentificationType aasId);
typedef AASStatusCode UA_FNC_CREATEPVSL(IdentificationType aasId, OV_STRING pvslName, IdentificationType carrier);
typedef AASStatusCode UA_FNC_DELETEPVSL(IdentificationType aasId, OV_STRING pvslName);
typedef AASStatusCode UA_FNC_CREATEPVS(IdentificationType aasId, OV_STRING pvslName, OV_STRING pvsName, RelationalExpressionEnum relationalExpression, ExpressionSemanticEnum ExpressionSemantic, OV_ANY value, OV_STRING unit, IdentificationType propertyReference, ViewEnum view, OV_BOOL IsPublic);
typedef AASStatusCode UA_FNC_DELETEPVS(IdentificationType aasId, OV_STRING pvslName, OV_STRING pvsName);
typedef AASStatusCode UA_FNC_SETPVS(IdentificationType aasId, OV_STRING pvslName, OV_STRING pvsName, RelationalExpressionEnum relationalExpression, ExpressionSemanticEnum ExpressionSemantic, OV_ANY value, OV_STRING unit, IdentificationType propertyReference, ViewEnum view, OV_BOOL IsPublic);
typedef AASStatusCode UA_FNC_GETPVS(IdentificationType aasId, OV_STRING pvslName, OV_STRING pvsName, RelationalExpressionEnum *relationalExpression, ExpressionSemanticEnum *ExpressionSemantic, OV_ANY *value, OV_STRING *unit, IdentificationType *propertyReference, ViewEnum *view, OV_BOOL *IsPublic);
typedef AASStatusCode UA_FNC_CREATELCE(IdentificationType aasId, IdentificationType creatingInstance, IdentificationType writingInstance, OV_STRING eventClass, OV_STRING subject, DataValue data);
typedef AASStatusCode UA_FNC_DELETELCE(IdentificationType aasId, OV_UINT64 lceId);
typedef AASStatusCode UA_FNC_SETLCE(IdentificationType aasId, OV_UINT64 lceId, IdentificationType creatingInstance, IdentificationType writingInstance, OV_STRING eventClass, OV_STRING subject, DataValue data);
typedef AASStatusCode UA_FNC_GETLCE(IdentificationType aasId, OV_UINT64 lceId, IdentificationType *creatingInstance, IdentificationType *writingInstance, OV_STRING *eventClass, OV_STRING *subject, DataValue *data);
typedef AASStatusCode UA_FNC_GETLASTLCES(IdentificationType aasId, OV_UINT count, IdentificationType **creatingInstance, IdentificationType **writingInstance, OV_STRING **eventClass, OV_STRING **subject, DataValue **data, OV_UINT *arrayDimension);
typedef UA_NodeId UA_FNC_GETAASNODEID(IdentificationType aasId);
typedef AASStatusCode UA_FNC_OVRESULTTOAASSTATUSCODE(OV_RESULT result);
typedef void OPENAAS_FNC_AASCONVERTLISTADD(IdentificationType aasId, OV_STRING aasName);
typedef void OPENAAS_FNC_AASCONVERTLISTDELETE(IdentificationType aasId);
typedef OV_STRING OPENAAS_FNC_AASCONVERTLISTGET(IdentificationType aasId);
typedef OV_BOOL OPENAAS_FNC_IDENTIFICATIONTYPEEQUAL(IdentificationType *aasId, IdentificationType *aasId2);
#endif
