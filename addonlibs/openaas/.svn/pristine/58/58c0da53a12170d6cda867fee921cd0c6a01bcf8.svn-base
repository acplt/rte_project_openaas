
/******************************************************************************
*
*   FILE
*   ----
*   getServerconfig.c
*
*   History
*   -------
*   2016-06-16   File created
*
*******************************************************************************
*
*   This file is generated by the 'acplt_builder' command
*
******************************************************************************/


#ifndef OV_COMPILE_LIBRARY_opcua
#define OV_COMPILE_LIBRARY_opcua
#endif


#include "opcua.h"
#include "libov/ov_macros.h"


OV_DLLFNCEXPORT OV_RESULT opcua_getServerconfig_constructor(
	OV_INSTPTR_ov_object 	pobj
) {
    /*    
    *   local variables
    */
    OV_INSTPTR_opcua_getServerconfig pinst = Ov_StaticPtrCast(opcua_getServerconfig, pobj);
    OV_RESULT    result;
    OV_STRING  outputNames [] = {"ov_time_offset", "ks_maxitemsperrequest", "maxstringlength", "maxvectorlength", "maxnamelength",
    		"maxhierarhydepth",	"ov_scheduler_allowed_jitter", "libraries", "classes", "associations",
    		"instanceCount", "database_free", "database_name", "database_size", "database_used",
    		"name", "server_description", "server_name", "server_time", "serverPID",
    		"startup_time", "ov_scheduler_num_exceeds", "cmdline-options"};
    OV_STRING outputDescriptions [] = {"no idea", "maximum number of items in aks-request", "maximum length of a sting", "maximum number ov elements in a vector (array)", "maximum length of names",
    		"maximum depth of instance hierarchy", "maximum jitter in scheduler", "loaded libraries", "loaded class definitions", "loaded association definitions",
    		"number of instances in the server", "free bytes in database", "database name (file)", "database size in bytes", "bytes used in the database",
    		"some name", "server description", "ks-server name", "server internal time", "servers process ID",
    		"server startup time", "number of jitter exceeds in scheduler", "commandline options of the server"};
    OV_INT outputTypes [] = {OV_VT_TIME_SPAN, OV_VT_UINT, OV_VT_UINT, OV_VT_UINT, OV_VT_UINT,
    		OV_VT_UINT, OV_VT_UINT, OV_VT_STRING, OV_VT_STRING,	OV_VT_STRING,
    		OV_VT_UINT, OV_VT_UINT, OV_VT_STRING, OV_VT_UINT, OV_VT_UINT,
    		OV_VT_STRING, OV_VT_STRING, OV_VT_STRING, OV_VT_TIME, OV_VT_UINT,
    		OV_VT_TIME, OV_VT_UINT, OV_VT_STRING};
    OV_BOOL outputIsArray [] = {FALSE, FALSE, FALSE, FALSE, FALSE,
    		FALSE, FALSE, TRUE, TRUE, TRUE,
    		FALSE, FALSE, FALSE, FALSE, FALSE,
    		FALSE, FALSE, FALSE, FALSE, FALSE,
    		FALSE, FALSE, FALSE};
    OV_UINT outputLengths [] = {0, 0, 0, 0, 0,
    		0, 0, 0, 0, 0,
    		0, 0, 0, 0, 0,
    		0, 0, 0, 0, 0,
    		0, 0, 0};


    /* do what the base class does first */
    result = ov_object_constructor(pobj);
    if(Ov_Fail(result))
         return result;

    /* do what */
    opcua_nodeStoreFunctions_setCallArgs(&(pinst->p_InputArguments), 0, NULL, NULL, NULL, NULL, NULL);
    opcua_nodeStoreFunctions_setCallArgs(&(pinst->p_OutputArguments), 23, outputNames, outputDescriptions, outputTypes, outputIsArray, outputLengths);

    return OV_ERR_OK;
}

OV_DLLFNCEXPORT OV_RESULT opcua_getServerconfig_calledMethod(
	OV_INSTPTR_opcua_methodNode pobj,
	size_t numberofInputArgs,
	const UA_Variant *packedInputArgList,
	size_t numberofOutputArgs,
	UA_Variant **packedOutputArgList
) {
    /*    
    *   local variables
    */
	OV_ANY outputs [23];
	OV_RESULT result;

	/*	we have no inputs, so nothing to unpack	*/
	ov_vendortree_gettimeoffset(&(outputs[0]), NULL);
	ov_vendortree_getKsMaxItems(&(outputs[1]), NULL);
	ov_vendortree_getMaxStringLength(&(outputs[2]), NULL);
	ov_vendortree_getMaxVectorLength(&(outputs[3]), NULL);
	ov_vendortree_getMaxNameLength(&(outputs[4]), NULL);

	ov_vendortree_getMaxHierarchyDepth(&(outputs[5]), NULL);
	ov_vendortree_getAllowedJitter(&(outputs[6]), NULL);
	ov_vendortree_getlibraries(&(outputs[7]), NULL);
	ov_vendortree_getclasses(&(outputs[8]), NULL);
	ov_vendortree_getassociations(&(outputs[9]), NULL);

	ov_vendortree_getInstanceCount(&(outputs[10]), NULL);
	ov_vendortree_getdatabasefree(&(outputs[11]), NULL);
	ov_vendortree_getdatabasename(&(outputs[12]), NULL);
	ov_vendortree_getdatabasesize(&(outputs[13]), NULL);
	ov_vendortree_getdatabaseused(&(outputs[14]), NULL);

	ov_vendortree_getname(&(outputs[15]), NULL);
	ov_vendortree_getserverdescription(&(outputs[16]), NULL);
	ov_vendortree_getservername(&(outputs[17]), NULL);
	ov_vendortree_getservertime(&(outputs[18]), NULL);
	ov_vendortree_getserverPID(&(outputs[19]), NULL);

	ov_vendortree_getstartuptime(&(outputs[20]), NULL);
	ov_vendortree_getNumExceeds(&(outputs[21]), NULL);
	ov_vendortree_getcmdlineoptions(&(outputs[22]), NULL);

	/*	pack outputs	*/
	result = opcua_nodeStoreFunctions_packCallArgs(23, outputs, packedOutputArgList);
    return result;

    return OV_ERR_OK;
}

