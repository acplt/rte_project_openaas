
/******************************************************************************
 *
 *   FILE
 *   ----
 *   nodeStoreFunctions.c
 *
 *   History
 *   -------
 *   2014-10-21   File created
 *
 *******************************************************************************
 *
 *   This file is generated by the 'acplt_builder' command
 *
 ******************************************************************************/


#ifndef OV_COMPILE_LIBRARY_opcua
#define OV_COMPILE_LIBRARY_opcua
#endif



#include "libov/ov_macros.h"
#include "ksbase.h"
#include "opcua.h"
#include "opcua_helpers.h"
#include "NoneTicketAuthenticator.h"
#include "libov/ov_path.h"
#include "libov/ov_memstack.h"



OV_DLLFNCEXPORT UA_Int32 opcua_nodeStoreFunctions_addNodes(
		void *ensHandle,
		const UA_RequestHeader *requestHeader,
		UA_AddNodesItem *nodesToAdd,
		UA_UInt32 *indices,
		UA_UInt32 indicesSize,
		UA_AddNodesResult* addNodesResults,
		UA_DiagnosticInfo *diagnosticInfos
) {
	return UA_STATUSCODE_BADNOTIMPLEMENTED;
}

OV_DLLFNCEXPORT UA_Int32 opcua_nodeStoreFunctions_addReferences(
		void *ensHandle,
		const UA_RequestHeader *requestHeader,
		UA_AddReferencesItem* referencesToAdd,
		UA_UInt32 *indices,
		UA_UInt32 indicesSize,
		UA_StatusCode *addReferencesResults,
		UA_DiagnosticInfo *diagnosticInfos
) {
	return UA_STATUSCODE_BADNOTIMPLEMENTED;
}

OV_DLLFNCEXPORT UA_Int32 opcua_nodeStoreFunctions_addOneWayReference(
	void *ensHandle,
	const UA_AddReferencesItem *item
) {
	/*	to make the stack happy
	 * this one is needed for cross-ns references. It only creates one side.
	 * on the long run, we need a uaReference object to handle these reference-sides
	 * within the ov-system 	*/
    return UA_STATUSCODE_GOOD;
}
